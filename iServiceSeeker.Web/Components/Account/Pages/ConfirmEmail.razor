@page "/Account/ConfirmEmail"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@using iServiceSeeker.Infrastructure.Data
@using iServiceSeeker.Core.Entities

@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext DbContext
@inject ILogger<ConfirmEmail> Logger

<PageTitle>Confirm email</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h1 class="card-title mb-0">Confirm Email</h1>
            </div>
            <div class="card-body">
                @if (isLoading)
                {
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Confirming your email...</p>
                    </div>
                }
                else
                {
                    <StatusMessage Message="@statusMessage" />

                    @if (isConfirmed)
                    {
                        <div class="alert alert-success">
                            <h4>Email Confirmed!</h4>
                            <p>Your email has been successfully confirmed. You can now:</p>
                            <ul>
                                <li>Access all features of your account</li>
                                <li>Receive important notifications</li>
                                @if (user?.UserType == UserType.ServiceProvider)
                                {
                                    <li>Complete your service provider profile</li>
                                }
                                @if (user?.UserType == UserType.Homeowner)
                                {
                                    <li>Start booking services</li>
                                }
                            </ul>
                            <div class="mt-3">
                                <a href="/Account/Manage" class="btn btn-primary me-2">
                                    Complete Profile
                                </a>
                                <a href="/" class="btn btn-outline-secondary">
                                    Go to Home
                                </a>
                            </div>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(statusMessage))
                    {
                        <div class="alert alert-danger">
                            <h4>Email Confirmation Failed</h4>
                            <p>We were unable to confirm your email address. This could be because:</p>
                            <ul>
                                <li>The confirmation link has expired</li>
                                <li>The link has already been used</li>
                                <li>The link is invalid or corrupted</li>
                            </ul>
                            <div class="mt-3">
                                <a href="/Account/ResendEmailConfirmation" class="btn btn-primary">
                                    Resend Confirmation Email
                                </a>
                                <a href="/Account/Login" class="btn btn-outline-secondary ms-2">
                                    Back to Login
                                </a>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string? statusMessage;
    private bool isLoading = true;
    private bool isConfirmed = false;
    private ApplicationUser? user;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (UserId is null || Code is null)
            {
                Logger.LogWarning("Email confirmation attempted without UserId or Code");
                RedirectManager.RedirectTo("");
                return;
            }

            user = await UserManager.FindByIdAsync(UserId);
            if (user is null)
            {
                Logger.LogWarning("Email confirmation attempted for non-existent user ID: {UserId}", UserId);
                HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
                statusMessage = $"Error loading user with ID {UserId}";
            }
            else
            {
                var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
                var result = await UserManager.ConfirmEmailAsync(user, code);

                if (result.Succeeded)
                {
                    isConfirmed = true;
                    statusMessage = "Thank you for confirming your email.";

                    // Update last login time
                    user.LastLoginAt = DateTime.UtcNow;
                    await UserManager.UpdateAsync(user);

                    // Log successful confirmation
                    Logger.LogInformation("Email confirmed for user {UserId} ({Email})", user.Id, user.Email);

                    // Optionally, you can check if profile completion is needed
                    if (!user.IsProfileComplete)
                    {
                        Logger.LogInformation("User {UserId} needs to complete profile", user.Id);
                    }
                }
                else
                {
                    var errors = string.Join(", ", result.Errors.Select(e => e.Description));
                    statusMessage = $"Error confirming your email: {errors}";
                    Logger.LogWarning("Email confirmation failed for user {UserId}: {Errors}", UserId, errors);
                }
            }
        }
        catch (FormatException ex)
        {
            Logger.LogError(ex, "Invalid confirmation code format for user {UserId}", UserId);
            statusMessage = "Error: Invalid confirmation code format.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unexpected error during email confirmation for user {UserId}", UserId);
            statusMessage = "An unexpected error occurred. Please try again or contact support.";
        }
        finally
        {
            isLoading = false;
        }
    }
}